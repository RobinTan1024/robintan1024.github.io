<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://robintan1024.github.io</id>
    <title>I&apos;M ROBIN</title>
    <updated>2020-09-27T07:46:29.121Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://robintan1024.github.io"/>
    <link rel="self" href="https://robintan1024.github.io/atom.xml"/>
    <subtitle>培养优秀的习惯</subtitle>
    <logo>https://robintan1024.github.io/images/avatar.png</logo>
    <icon>https://robintan1024.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, I&apos;M ROBIN</rights>
    <entry>
        <title type="html"><![CDATA[Android 应用清单]]></title>
        <id>https://robintan1024.github.io/post/android-ying-yong-qing-dan/</id>
        <link href="https://robintan1024.github.io/post/android-ying-yong-qing-dan/">
        </link>
        <updated>2020-09-27T07:04:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="概述">概述</h1>
<p>应用清单文件 AndroidManifest.xml 位于项目根目录，其主要的作用是向 Android OS 声明应用的相关信息，这些信息包括：</p>
<ul>
<li>应用包名；</li>
<li>应用权限；</li>
<li>应用组件；</li>
<li>应用设备兼容性；</li>
</ul>
<h1 id="应用包名">应用包名</h1>
<p>应用清单的根元素是 <code>manifest</code> ，其属性 <code>manifest.package</code> 的值就是需要声明的应用包名：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.myapp&quot;&gt;
    ...
&lt;/manifest&gt;
</code></pre>
<p>在生成 APK 时，构建工具将使用 <code>manifest.package</code> 属性完成两件事：</p>
<ul>
<li>将 <code>manifest.package</code> 属性生成 <code>R.java</code> 类的命名空间，也就是说 <code>R</code> 类的命名空间为 <code>com.example.myapp.R</code> ；</li>
<li>相关类解析：将 <code>.MainActivity</code> 解析为 <code>com.example.myapp.MainActivity</code> ；</li>
</ul>
<p><code>manifest.package</code> 属性不需要与软件代码的命名空间（目录结构）相同。相对的，在这些代码中访问资源需要填写完整的 R 类命名空间（如 com.example.myapp.R ），总而言之就是命名空间问题。</p>
<h2 id="buildgradle-的-applicationid">build.gradle 的 applicationId</h2>
<p>在 Android Studio 中，当构建工具完成了对 <code>R.java</code> 类命名空间和相关类的解析后，Gradle 将把 <code>packag</code>e 属性更换为项目 <code>build.gradle.applicationId</code> 属性的值。</p>
<p>问题：<code>manifest.package</code> 和 <code>build.gradle.applicationId</code> 的关联与区别？</p>
<p>区别一：在构建打包时，在 <code>manifest.package</code> 先完成了其两件事后，应用包名才会被替换成 <code>build.gradle.applicationId</code> ，所以 <code>R.java</code> 类的命名空间和相关类的解析结果不会被替换成 <code>build.gradle.applicationId</code> ；</p>
<p>区别二：<code>build.gradle.applicationId</code> 的语义是应用 ID ，是 Android OS 和应用商店用于识别应用的唯一 ID ，绝对不应该改变应用 ID 。而 <code>manifest.package</code> 的语义是包名，只在程序内部起作用；</p>
<p>至此，最终的理解是：软件代码命名空间 ≠ <code>manifest.package</code> ≠ <code>build.gradle.applicationId</code> 。</p>
<h2 id="更改应用包名">更改应用包名</h2>
<p><code>build.gradle.applicationId</code> 虽不应该随意改动，但它的改动不影响代码编译执行。</p>
<p><code>manifest.package</code> 关联 <code>R</code> 资源类的命名空间和应用清单相关类的解析，改变它的值后，所有用到 <code>R</code> 的地方都要改变，相关类的命名空间也要填写完整。</p>
<p>软件代码命名空间改变（也就是目录改变），用到 <code>R</code> 资源类的命名空间都会发生改变需要更新，影响范围内的文件包头 <code>package</code> 字段也要改变。</p>
<h1 id="应用组件">应用组件</h1>
<p>对于应用创建的每个组件，都应该在应用清单文件中声明，未声明的组件将无法使用（广播接收器可动态声明）。</p>
<h2 id="组件信息">组件信息</h2>
<p>分别用对应的 XML 元素声明各个组件：</p>
<ul>
<li><code>&lt;activity&gt;</code> 声明 Activity ；</li>
<li><code>&lt;service&gt;</code> 声明服务；</li>
<li><code>&lt;receiver&gt;</code> 声明广播接收器；</li>
<li><code>&lt;provider&gt;</code> 声明内容提供者；</li>
</ul>
<p>且各个 XML 元素必须用 <code>name</code> 属性来指定组件类的名称。</p>
<h2 id="组件功能">组件功能</h2>
<p>应用四大组件中的活动，服务和广播接收器都是由 <code>intent</code> 启动的。当应用向系统发出 <code>intent</code> 后，系统会查询各个应用的清单文件中各个组件，来查找可以处理该 <code>intent</code> 的所有组件。那系统是怎么知道组件能否处理某 <code>intent</code> 的呢？这就需要我们在应用清单中声明组件功能了，功能也就是指可处理的 <code>intent</code> 了。</p>
<p>声明组件功能的方式是：在组件声明元素中填写 <code>intent-filter</code> 子元素，然后再在 <code>intent-filter</code> 中填写可处理的 <code>intent</code> 即可：</p>
<pre><code class="language-xml">&lt;activity android:name=&quot;com.xxx&quot;&gt;
    &lt;intent-filter&gt;
    ...
  &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<p>那么，如何描述组件可以处理的 <code>intent</code> 呢？</p>
<ul>
<li><code>action</code>：形如 <code>&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</code> ，描述了组件将对哪些操作有反应。 <code>name</code> 属性可以是 <code>android.intent.action</code> 的成员枚举，也可以是应用自定义的字符串。如果一个组件没有声明任何的 <code>action</code> ，则表示其不会响应任何 <code>intent</code> ；<br>
• <code>category</code>：语法 <code>&lt;category android:name=&quot;string&quot; /&gt;</code> ，因为 <code>intent</code> 可以携带 <code>category</code> 信息，向 <code>intent-filter</code> 添加 <code>category</code> 使组件可以处理该 <code>intent</code> ；<br>
• <code>data</code>：指定引用了带操作数据的 <code>URI</code> 或者是数据的类型，其语法是</li>
</ul>
<pre><code class="language-xml">&lt;data android:scheme=&quot;string&quot;
      android:host=&quot;string&quot;
      android:port=&quot;string&quot;
      android:path=&quot;string&quot;
      android:pathPattern=&quot;string&quot;
      android:pathPrefix=&quot;string&quot;
      android:mimeType=&quot;string&quot; /&gt;

URI format is &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;
</code></pre>
<p>其中 <code>URI</code> 由多个属性组成。</p>
<h1 id="应用权限">应用权限</h1>
<p>如果需要访问敏感用户数据或者使用某些系统功能，则应用必须先在清单文件中使用 <code>&lt;uses-permission&gt;</code> 元素声明所需的权限，如访问网络需要声明 <code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code> 。</p>
<p>从 Android 6.0 开始，部分重要权限需要在应用运行时申请，这些权限同样需要预先在清单文件中进行声明。</p>
<h2 id="应用设备兼容性">应用设备兼容性</h2>
<p>清单文件可以声明应用所需的软件或硬件功能类型，以及应用兼容的设备类型。</p>
<p><code>&lt;uses-feature&gt;</code> 元素允许您声明应用所需的硬件和软件功能。 例如，如果您的应用无法在缺少罗盘传感器的设备上实现基础功能，则您可使用以下清单标记将罗盘传感器声明为必需功能 <code>&lt;uses-feature android:name=&quot;android.hardware.sensor.compass&quot; android:required=&quot;true&quot; /&gt;</code> 。</p>
<h1 id="合并多个清单文件">合并多个清单文件</h1>
<p>相当复杂，以后再总结：<a href="https://developer.android.google.cn/studio/build/manifest-merge?hl=zh-cn">链接</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 开发]]></title>
        <id>https://robintan1024.github.io/post/android/</id>
        <link href="https://robintan1024.github.io/post/android/">
        </link>
        <updated>2020-09-27T06:56:35.000Z</updated>
        <content type="html"><![CDATA[<p>关于 Android 的一切 🌈🔥</p>
<h1 id="基础知识">基础知识</h1>
<ul>
<li><a href="/post/android-ying-yong-qing-dan">应用清单</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法复杂度]]></title>
        <id>https://robintan1024.github.io/post/suan-fa-fu-za-du/</id>
        <link href="https://robintan1024.github.io/post/suan-fa-fu-za-du/">
        </link>
        <updated>2020-08-05T04:22:29.000Z</updated>
        <summary type="html"><![CDATA[<p>太久没搞算法也没有做题，已经忘记如何计算算法的复杂度了😂，大学的时候学的「软件工程」都已经还给曾老师了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>太久没搞算法也没有做题，已经忘记如何计算算法的复杂度了😂，大学的时候学的「软件工程」都已经还给曾老师了。</p>
<!-- more -->
<h1 id="什么是算法复杂度">什么是算法复杂度？</h1>
<p>算法，是指对某种程序问题的具体解决办法。要解决一个程序问题，可以有多种算法，各种算法必定有优劣之分，用于比对优劣的指标就是算法的复杂度。算法复杂度的具体表现是时间和空间，算法执行时间越短，耗费内存空间越小，则算法的性能越好。</p>
<h2 id="时间复杂度">时间复杂度</h2>
<p>大O表示法常用于描述一个算法的时间复杂度，其描述方式是 <code>T(n)=O(f(n))</code> ，其中 <code>f(n)</code> 表示算法的计算方式，<code>n</code> 是指算法的规模，<code>O</code> 则指一种相对关系。常见的计算方式有 5 种：</p>
<ul>
<li>常数阶 <code>O(1)</code></li>
<li>线性阶 <code>O(n)</code></li>
<li>指数阶 <code>O(n^m)</code> ，例如：平方阶 <code>O(n^2)</code> 、立方阶 <code>O(n^3)</code>  等</li>
<li>对数阶 <code>O(logn)</code></li>
<li>线性对数阶 <code>O(nlogn)</code></li>
</ul>
<h2 id="空间复杂度">空间复杂度</h2>
<p>算法在执行的过程中需要开辟临时内存空间，空间复杂度是对这个临时内存空间大小的度量。常见的空间复杂度有 3 种：</p>
<ul>
<li>常数 <code>O(1)</code></li>
<li>线性 <code>O(n)</code></li>
<li>指数 <code>O(n^m)</code> ，例如：平方 <code>O(n^2)</code> 、立方 <code>O(n^3)</code>  等</li>
</ul>
]]></content>
    </entry>
</feed>